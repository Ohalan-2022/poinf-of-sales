---
description: Responsive design patterns and touch optimization for different POS roles
globs: **/components/**,**/layouts/**
---

# Responsive Design Patterns for POS System

## Device Usage Patterns by Role

### Admin Interface (Desktop + Tablet)
- **Primary:** Desktop (1024px+)
- **Secondary:** Tablet (768px - 1023px)
- **Focus:** Complex layouts with detailed information

### Server Interface (Tablet + Desktop)  
- **Primary:** Tablet (768px - 1279px)
- **Secondary:** Desktop (1280px+)
- **Focus:** Touch-friendly product selection and order creation

### Counter Interface (Desktop + Tablet)
- **Primary:** Desktop (1024px+)
- **Secondary:** Tablet (768px - 1023px)
- **Focus:** Fast payment processing and order management

### Kitchen Interface (Tablet-First)
- **Primary:** Tablet (768px+)
- **Optimized for:** Touch interactions and quick status updates

## Responsive Breakpoints

```typescript
// Standard breakpoints
const breakpoints = {
  mobile: '< 768px',      // md
  tablet: '768px - 1023px', // md to lg
  desktop: '1024px+',      // lg+
  large: '1280px+'         // xl+
}

// Detection pattern
useEffect(() => {
  const checkScreenSize = () => {
    const width = window.innerWidth
    setIsMobile(width < 768)
    setIsTablet(width >= 768 && width < 1024)
    setIsDesktop(width >= 1024)
  }

  checkScreenSize()
  window.addEventListener('resize', checkScreenSize)
  return () => window.removeEventListener('resize', checkScreenSize)
}, [])
```

## Admin Layout Responsive Patterns

### Sidebar Navigation
```typescript
// AdminLayout sidebar pattern
<div className={`bg-card border-r border-border transition-all duration-300 flex flex-col z-50 ${
  (isMobile || isTablet) 
    ? `fixed left-0 top-0 h-full ${sidebarCollapsed ? '-translate-x-full w-0' : 'translate-x-0 w-80'}` 
    : `relative ${sidebarCollapsed ? 'w-16' : 'w-64'}`
}`}>
```

**Key Features:**
- **Desktop:** Persistent sidebar (w-64 â†” w-16)
- **Tablet/Mobile:** Overlay sidebar (w-80) with backdrop
- **Auto-collapse:** Sidebar starts collapsed on screens < 1024px
- **Touch-friendly:** Larger buttons and spacing on tablet

### Navigation Buttons
```typescript
// Tablet-optimized button sizing
<Button
  className={`w-full justify-start transition-colors ${
    sidebarCollapsed && !isMobile && !isTablet ? 'px-2' : 'px-4'
  } ${
    isTablet ? 'h-12 text-base' : 'h-10 text-sm'
  }`}
  onClick={() => {
    setCurrentSection(section.id)
    // Auto-close sidebar on mobile/tablet after selection
    if (isMobile || isTablet) {
      setSidebarCollapsed(true)
    }
  }}
>
```

## Touch-Friendly Design Patterns

### Button Sizing by Device
```typescript
// Touch target optimization
const getButtonSize = (isTablet: boolean, purpose: 'navigation' | 'action' | 'icon') => {
  if (purpose === 'navigation') {
    return isTablet ? 'h-12 text-base px-4' : 'h-10 text-sm px-3'
  }
  if (purpose === 'action') {
    return isTablet ? 'h-14 text-lg px-6' : 'h-10 text-sm px-4'
  }
  if (purpose === 'icon') {
    return isTablet ? 'h-12 w-12' : 'h-8 w-8'
  }
}
```

### Icon Sizing
```typescript
// Responsive icon sizes
const iconSize = {
  mobile: 'w-4 h-4',
  tablet: 'w-6 h-6',
  desktop: 'w-5 h-5'
}

// Usage example
<ShoppingCart className={`${isTablet ? 'w-6 h-6' : 'w-5 h-5'}`} />
```

## Grid Layout Patterns

### Product Grid Responsive
```typescript
// Server/Counter interface product grids
<div className={`grid gap-4 md:gap-6 ${
  isTablet 
    ? 'grid-cols-1 sm:grid-cols-2 lg:grid-cols-2 xl:grid-cols-3' 
    : 'grid-cols-1 md:grid-cols-2 lg:grid-cols-3'
}`}>
```

### Kitchen Order Grid  
```typescript
// Kitchen-specific tablet-optimized grid
<div className={`grid gap-4 md:gap-6 ${
  isTabletOptimized 
    ? 'grid-cols-1 sm:grid-cols-1 md:grid-cols-2 lg:grid-cols-2 xl:grid-cols-3' 
    : 'grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4'
}`}>
```

## Mobile/Tablet Overlay Patterns

### Sliding Cart (Server Interface)
```typescript
// Cart overlay for tablet
<div className={`bg-card border-l border-border p-4 md:p-6 ${
  isTablet 
    ? `${showCart ? 'fixed right-0 top-0 h-full w-96 z-50 shadow-lg' : 'hidden xl:block w-96'}`
    : 'w-96'
}`}>

// Backdrop overlay
{isTablet && showCart && (
  <div 
    className="fixed inset-0 bg-black/50 z-40 xl:hidden"
    onClick={() => setShowCart(false)}
  />
)}
```

### Mobile Cart Toggle
```typescript
// Tablet cart toggle button
{isTablet && (
  <Button 
    variant="outline" 
    size="lg"
    onClick={() => setShowCart(!showCart)}
    className="md:hidden"
  >
    <ShoppingCart className="w-5 h-5 mr-2" />
    Cart ({cart.length})
  </Button>
)}
```

## Spacing and Typography

### Responsive Spacing
```typescript
// Container padding
<div className={`p-4 md:p-6 ${isTabletOptimized ? 'px-8' : 'px-4'}`}>

// Element margins  
<div className={`mb-4 ${isTablet ? 'mb-6' : 'mb-4'}`}>

// Button spacing
<div className={isTablet ? "space-y-3" : "space-y-2"}>
```

### Typography Scale
```typescript
// Heading sizes
<h1 className={`font-bold ${isTablet ? 'text-3xl' : 'text-2xl'}`}>

// Body text
<p className={`text-muted-foreground ${isTablet ? 'text-base' : 'text-sm'}`}>

// Badge/small text
<Badge className={isTablet ? "text-sm px-3 py-1" : "text-xs"}>
```

## Touch Interaction Patterns

### Long-Press Prevention
```css
/* Prevent text selection on touch devices */
.touch-optimized {
  -webkit-touch-callout: none;
  -webkit-user-select: none;
  -khtml-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}
```

### Tap Highlight Removal
```css
/* Remove tap highlights on mobile */
button, .clickable {
  -webkit-tap-highlight-color: transparent;
}
```

## Performance Considerations

### Conditional Rendering
```typescript
// Only render expensive components when needed
{!isMobile && <DesktopOnlyComponent />}
{isTablet && <TabletOptimizedComponent />}
```

### Lazy Loading
```typescript
// Lazy load components by screen size
const MobileComponent = lazy(() => import('./MobileComponent'))
const DesktopComponent = lazy(() => import('./DesktopComponent'))

return (
  <Suspense fallback={<LoadingSpinner />}>
    {isMobile ? <MobileComponent /> : <DesktopComponent />}
  </Suspense>
)
```

## Accessibility Patterns

### Focus Management
```typescript
// Ensure proper focus handling on screen size changes
useEffect(() => {
  if (isMobile && isNavOpen) {
    // Focus first navigation item
    navRef.current?.querySelector('button')?.focus()
  }
}, [isMobile, isNavOpen])
```

### ARIA Labels for Touch
```typescript
// Descriptive labels for touch interfaces
<Button 
  aria-label={`Add ${product.name} to cart - Price: ${formatCurrency(product.price)}`}
  className={isTablet ? "px-6 py-4" : "px-4 py-2"}
>
```

## Testing Guidelines

### Device Testing Priority
1. **Admin:** Desktop first, then tablet
2. **Server:** Tablet first, then desktop  
3. **Counter:** Desktop first, then tablet
4. **Kitchen:** Tablet only (primary use case)

### Touch Testing
- Minimum touch target: 44px x 44px
- Test with actual fingers, not stylus
- Verify scrolling performance on tablets
- Check for accidental touches near edges