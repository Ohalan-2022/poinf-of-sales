---
description: Authentication flow debugging and best practices for React applications
globs: **/routes/**,**/auth/**,**/login/**
---

# Authentication Flow Debugging & Best Practices

## Critical Authentication Patterns

### Environment Variable Configuration
```typescript
// API Client Configuration
class APIClient {
  constructor() {
    const apiUrl = import.meta.env?.VITE_API_URL || 'http://localhost:8080/api/v1';
    console.log('üîß API Client baseURL:', apiUrl);
    console.log('üîß Environment VITE_API_URL:', import.meta.env?.VITE_API_URL);
    
    this.client = axios.create({
      baseURL: apiUrl,
      timeout: 30000,
      headers: { 'Content-Type': 'application/json' }
    });
  }
}
```

**Key Points:**
- Always include `/api/v1` path in VITE_API_URL
- Add console.log statements for debugging environment variables
- Use fallback URLs for development

### Docker Environment Variables
```yaml
# docker-compose.dev.yml
services:
  frontend:
    environment:
      - VITE_API_URL=http://localhost:8080/api/v1  # Include full path with /api/v1
```

**Common Issue:** Missing `/api/v1` in environment variables causes 404 errors

### Authentication State Management

#### HomePage Component Pattern
```typescript
function HomePage() {
  const [user, setUser] = useState<User | null>(null)
  const [isLoading, setIsLoading] = useState(true) // Critical: Start with true
  
  // ALL HOOKS MUST BE AT TOP LEVEL - before any returns
  const { isLoading: isServerVerifying, error } = useQuery({
    queryKey: ['currentUser'],
    queryFn: () => apiClient.getCurrentUser(),
    enabled: false, // Disable until needed
    retry: 1,
  })
  
  useEffect(() => {
    const storedUser = localStorage.getItem('pos_user')
    if (storedUser) {
      try {
        const parsedUser = JSON.parse(storedUser)
        setUser(parsedUser)
      } catch (error) {
        localStorage.removeItem('pos_user')
        localStorage.removeItem('pos_token')
      }
    }
    setIsLoading(false) // Critical: Set after localStorage check
  }, [])
  
  // Wait for localStorage loading before authentication check
  if (isLoading) {
    return <LoadingSpinner />
  }
  
  // Check authentication ONLY after localStorage is loaded
  if (!apiClient.isAuthenticated() || !user) {
    return <Navigate to="/login" />
  }
  
  return <RoleBasedLayout user={user} />
}
```

#### Login Component Pattern
```typescript
function LoginPage() {
  // Check if already authenticated
  if (apiClient.isAuthenticated()) {
    return <Navigate to="/" />
  }
  
  const loginMutation = useMutation({
    mutationFn: async (credentials: LoginRequest) => {
      const response = await apiClient.login(credentials)
      return response
    },
    onSuccess: (data) => {
      if (data.success && data.data) {
        apiClient.setAuthToken(data.data.token)
        localStorage.setItem('pos_user', JSON.stringify(data.data.user))
        // Use setTimeout to prevent race conditions
        setTimeout(() => {
          router.navigate({ to: '/' })
        }, 100)
      }
    }
  })
}
```

## Common Authentication Issues & Solutions

### Issue 1: Infinite Redirect Loop
**Symptoms:**
- Continuous redirects between `/login` and `/`
- Console shows repeated navigation

**Root Cause:**
```typescript
// ‚ùå WRONG - Checking auth before user is loaded from localStorage
if (!apiClient.isAuthenticated() || !user) {
  return <Navigate to="/login" />
}
```

**Solution:**
```typescript
// ‚úÖ CORRECT - Wait for localStorage loading
if (isLoading) {
  return <LoadingSpinner />
}

if (!apiClient.isAuthenticated() || !user) {
  return <Navigate to="/login" />
}
```

### Issue 2: React Hooks Rules Violation
**Symptoms:**
- "Rendered more hooks than during the previous render"
- Hooks called conditionally

**Root Cause:**
```typescript
// ‚ùå WRONG - Hook called after conditional return
function Component() {
  if (someCondition) {
    return <div>Early return</div>
  }
  
  const { data } = useQuery(...) // Violates Rules of Hooks
}
```

**Solution:**
```typescript
// ‚úÖ CORRECT - All hooks at top level
function Component() {
  const { data } = useQuery(...) // Hook at top level
  
  if (someCondition) {
    return <div>Early return</div>
  }
}
```

### Issue 3: Environment Variable Issues
**Symptoms:**
- API requests go to wrong URLs (e.g., `/auth/login` instead of `/api/v1/auth/login`)
- 404 errors on authentication

**Debugging Steps:**
1. Check console logs for baseURL
2. Verify `docker-compose.dev.yml` environment variables
3. Restart containers after changing environment variables
4. Use `docker logs pos-frontend-dev` to check build errors

**Solutions:**
```bash
# Stop and recreate containers (restart is not enough for env vars)
make down
make dev

# Check environment variables are applied
docker logs pos-frontend-dev --tail 20
```

### Issue 4: Container Restart vs Recreate
**Important Distinction:**
- `docker compose restart` - Restarts containers but keeps same configuration
- `make down && make dev` - Stops, removes, and recreates containers with new configuration

**When to Recreate:**
- Changed environment variables in docker-compose files
- Changed Docker configurations
- Environment variable changes not taking effect

## Debugging Checklist

### Frontend Authentication Issues
1. **Check Console Logs:**
   ```javascript
   console.log('üîß API Client baseURL:', apiUrl)
   console.log('üîß Environment VITE_API_URL:', import.meta.env?.VITE_API_URL)
   ```

2. **Check Network Tab:**
   - Verify API requests go to correct URLs
   - Check for 404 vs 401 errors

3. **Check localStorage:**
   ```javascript
   console.log('Stored user:', localStorage.getItem('pos_user'))
   console.log('Stored token:', localStorage.getItem('pos_token'))
   ```

### Backend Authentication Issues
1. **Check Logs:**
   ```bash
   docker logs pos-backend-dev --tail 50
   ```

2. **Verify Route Registration:**
   ```go
   // Ensure routes are properly prefixed
   api := router.Group("/api/v1")
   api.POST("/auth/login", handlers.Login)
   ```

3. **Check CORS Configuration:**
   ```go
   config := cors.DefaultConfig()
   config.AllowOrigins = []string{"http://localhost:3000"}
   ```

## Best Practices

### 1. Environment Setup
- Always include full API path in VITE_API_URL
- Use console.log for debugging environment variables
- Document required environment variables

### 2. State Management
- Initialize loading states properly
- Wait for localStorage before authentication checks
- Handle parsing errors gracefully

### 3. Error Handling
- Implement proper error boundaries
- Provide meaningful error messages
- Log errors for debugging

### 4. Development Workflow
- Use `make down && make dev` when changing configurations
- Check both frontend and backend logs
- Test authentication flow thoroughly after changes

### 5. Container Management
- Understand difference between restart and recreate
- Always recreate containers after environment changes
- Monitor logs during development